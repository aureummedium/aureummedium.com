#+hugo_base_dir: ../

* DONE The Golden Mean                                       :@about:
:PROPERTIES:
:EXPORT_FILE_NAME: golden-mean
:END:
Aristotle conceived of virtue as a balance between two extremes. For example, the virtue of generosity is defined as the correct balance between wastefulness and stinginess. Courage is a balance between confidence and fear. /Phronesis/, or practical wisdom, involves knowing how to apply the virtues in specific contexts. /Phronesis/ and the virtues of character are connected in such a way that one cannot possess any developed virtues without possessing all the others. Therefore, there are not many distinct criteria for judging the virtue of an individual, but rather one complex measure.[fn:1]

Software engineering is a series of trade-offs. Good engineering involves achieving the correct balance between various practices within specific contexts. Because software engineering is a human activity we can apply the philosophy of the /golden mean/ to various aspects of the planning, production, and consumption of software products. Aristotle declares at the very beginning of the /Nicomachean Ethics/ that all technical arts aim at some good. This aim may only be subordinate to a higher aim. There is one ultimate end which must be the supreme good. Software is not an end in itself but a means to achieving a higher good.

The most crucial question to ask about software is: what purpose does it serve? If its basic purpose is unjust in the sense that its aims are not virtuous then the best engineering choice would be not to produce it at all. This idea is summarized by Google's "Don't be evil" motto.

The next set of questions surround what are commonly termed "best practices". Using this phrase begs the question. What is best? Not only does this hinge on the philosophical framework outlined above, it also involves psychological elements related to teamwork and communication. Take Test-Driven Development (TDD) for example. There is not enough consensus to establish TDD as a universal or even common practice. What an individual developer does is largely dependent on what the team does. One team member is unlikely to affect sweeping changes in an organization. However, the individual may find value in practicing TDD and may share that enthusiasm when appropriate. As long as the individual contributor maintains balance between extremes of courage (excessive fearlessness/lack of confidence) and possesses all other virtues, the /golden mean/ is achieved and the developer is worthy of praise.

Software development is perhaps the most complex human undertaking. Despite being so crucial it is often trivialized by dismissing the ethical dimensions or the importance of /phronesis/.


[fn:1]  Alasdair MacIntyre, /After Virtue: A Study in Moral Theory/, 155

* Function Length
:PROPERTIES:
:EXPORT_FILE_NAME: function-length
:END:
How long should a function be? As with many style considerations in software development, there are conflicting opinions. Some argue that functions should be allowed to grow while others believe functions should be extracted until no conceptual overhead remains. [[http://number-none.com/blow/blog/programming/2014/09/26/carmack-on-inlined-code.html][John Carmack]] and [[https://www.goodreads.com/quotes/9681105-from-time-to-time-a-complex-algorithm-will-lead-to][Steve McConnell]] represent the first camp while [[https://martinfowler.com/bliki/FunctionLength.html][Martin Fowler]] and [[https://www.goodreads.com/quotes/7630396-the-first-rule-of-functions-is-that-they-should-be][Robert C. Martin]] belong to the latter.

John Carmack's argument for inlining is pragmatic and related to the kinds of programming he does (games and flight software). The real danger is lack of awareness of complex state changes. Long functions are a lesser evil because they keep more state local. The better option is functional programming. Like Carmack, Steve McConnell's argument is based on other factors such as cohesion and complexity. He suggests an upper limit of 200 lines. He does not provide guidelines for what should be extracted to keep functions under that limit.

Martin Fowler advocates separating intention and implementation. In other words, if the intention of a fragment of code is not obvious, it should be extracted into a function and named after its purpose. Robert C. Martin goes a step further and [[https://sites.google.com/site/unclebobconsultingllc/one-thing-extract-till-you-drop][suggests extacting until nothing more can be extracted]]. Functions should do only one thing and if something can be extracted they don't do only one thing.

Both sides present legitimate concerns and have settled on reasonable trade-offs. Long functions expose details while hiding intention. Short functions hide details while exposing intention. Which side to choose depends on the project, team, organization, and so on.

Since programming style cannot be universally agreed upon it is better to adopt a style for a particular project rather than arguing over what style is best. For an existing code base the style should be the most widely used, unless consensus dictates otherwise. For a new project a style to imitate should be chosen whether from a style guide or an existing body of work. Consistency trumps other considerations because it communicates most clearly. There is no need for a developer to read an entire code base to see that functions are short on average. Comments on individual functions are easy to miss.
